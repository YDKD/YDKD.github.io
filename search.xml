<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云ecs服务器开启ipv6支持(超详细教程)</title>
      <link href="/2020/01/23/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%90%AFIPv6%E6%94%AF%E6%8C%81/"/>
      <url>/2020/01/23/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E5%90%AFIPv6%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note primary">            <p>Hexo+GitHub Page+butterfly+jsdelivr+来比力+algolia+百度统计+leancloud+aplayer+PicGo </p>          </div><div class="note info">            <p>第二篇个人博客，关于讲解服务器运行出现问号+彻底解决mysql保存数据出现中文的情况</p>          </div><div class="note success">            <p>第三篇个人博客，关于讲解阿里云ecs服务器开启ipv6支持(超详细教程)</p>          </div><h3 id="ipv6模块"><a href="#ipv6模块" class="headerlink" title="ipv6模块"></a>ipv6模块</h3><h4 id="1、修改-etc-modprobe-d-disable-ipv6-conf文件"><a href="#1、修改-etc-modprobe-d-disable-ipv6-conf文件" class="headerlink" title="1、修改/etc/modprobe.d/disable_ipv6.conf文件"></a>1、修改/etc/modprobe.d/disable_ipv6.conf文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/modprobe.d/disable_ipv6.conf</span><br></pre></td></tr></table></figure><p>修改前</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias net-pf-10 off</span><br><span class="line">options ipv6 disable=1</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias net-pf-10 off</span><br><span class="line">options ipv6 disable=0</span><br></pre></td></tr></table></figure><h4 id="2、修改-etc-sysconfig-network"><a href="#2、修改-etc-sysconfig-network" class="headerlink" title="2、修改/etc/sysconfig/network"></a>2、修改/etc/sysconfig/network</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network</span><br></pre></td></tr></table></figure><p>修改前</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=coolnull</span><br><span class="line">NETWORKING_IPV6=no</span><br><span class="line">PEERNTP=no</span><br><span class="line">GATEWAY=*.*.*.*</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=coolnull</span><br><span class="line">NETWORKING_IPV6=yes</span><br><span class="line">PEERNTP=no</span><br><span class="line">GATEWAY=*.*.*.*</span><br></pre></td></tr></table></figure><h4 id="3、修改-etc-sysctl-conf"><a href="#3、修改-etc-sysctl-conf" class="headerlink" title="3、修改/etc/sysctl.conf"></a>3、修改/etc/sysctl.conf</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>修改前</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 0</span><br></pre></td></tr></table></figure><h4 id="4、创建系统在启动时自动加载-IPv6-模块的脚本"><a href="#4、创建系统在启动时自动加载-IPv6-模块的脚本" class="headerlink" title="4、创建系统在启动时自动加载 IPv6 模块的脚本"></a>4、创建系统在启动时自动加载 IPv6 模块的脚本</h4><p>创建脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/modules/ipv6.modules</span><br></pre></td></tr></table></figure><p>脚本内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">!/bin/sh</span><br><span class="line"><span class="keyword">if</span> [ ! -c /proc/net/if_inet6 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">exec</span> /sbin/insmod /lib/modules/uname -r/kernel/net/ipv6/ipv6.ko</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h4 id="5、重启服务器，检查内核是否已经支持ipv6"><a href="#5、重启服务器，检查内核是否已经支持ipv6" class="headerlink" title="5、重启服务器，检查内核是否已经支持ipv6"></a>5、重启服务器，检查内核是否已经支持ipv6</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -a | grep ipv6 | grep <span class="built_in">disable</span></span><br></pre></td></tr></table></figure><p> 运行以上命令，查看有无回显，若有回显说明内核已经支持ipv6</p><p> 若没有回显，重启服务器，使内核生效</p><h4 id="6、开启内核参数支持ipv6"><a href="#6、开启内核参数支持ipv6" class="headerlink" title="6、开启内核参数支持ipv6"></a>6、开启内核参数支持ipv6</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv6.conf.all.disable_ipv6=0</span><br></pre></td></tr></table></figure><p> 再次运行<code>sysctl -a | grep ipv6 | grep disable</code></p><p> 若参数全部为0，则说明ipv6已经全部支持</p><h4 id="7、至此ipv6的服务器端支持已经完成，重启服务器测试是否支持ipv6，重启后"><a href="#7、至此ipv6的服务器端支持已经完成，重启服务器测试是否支持ipv6，重启后" class="headerlink" title="7、至此ipv6的服务器端支持已经完成，重启服务器测试是否支持ipv6，重启后"></a>7、至此ipv6的服务器端支持已经完成，重启服务器测试是否支持ipv6，重启后</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep ipv6</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/hel.png" class="lazyload"></p><p><code>有输出就代表开启成功</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig | grep -i inet6</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/dasd.png" class="lazyload"></p><h3 id="申请ipv6地址"><a href="#申请ipv6地址" class="headerlink" title="申请ipv6地址"></a>申请ipv6地址</h3><h4 id="1、进入tunnel官网申请一个账号，链接如下"><a href="#1、进入tunnel官网申请一个账号，链接如下" class="headerlink" title="1、进入tunnel官网申请一个账号，链接如下"></a>1、进入tunnel官网申请一个账号，链接如下</h4><p><a href="https://www.tunnelbroker.net/" target="_blank" rel="noopener">Tunnel官网</a></p><h4 id="2、选择-Create-Regular-Tunnel-创建一个到自己公网-IP-的通道。"><a href="#2、选择-Create-Regular-Tunnel-创建一个到自己公网-IP-的通道。" class="headerlink" title="2、选择 Create Regular Tunnel 创建一个到自己公网 IP 的通道。"></a>2、选择 Create Regular Tunnel 创建一个到自己公网 IP 的通道。</h4><p><img alt="创建教程" data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/dasdasd.png" class="lazyload"></p><h4 id="3、到此可能会遇到在输入自己地址之后，提示ping不通的情况，按如下教程处理"><a href="#3、到此可能会遇到在输入自己地址之后，提示ping不通的情况，按如下教程处理" class="headerlink" title="3、到此可能会遇到在输入自己地址之后，提示ping不通的情况，按如下教程处理"></a>3、到此可能会遇到在输入自己地址之后，提示ping不通的情况，按如下教程处理</h4><ol><li><p>登录阿里云控制台-&gt;找到安全组规则-&gt;添加安全组规则</p></li><li><p>按照下图操作，</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/dassd.png" class="lazyload"></p><p>到此可以本地和服务器都ping一下，问题得以解决。</p></li></ol><h4 id="4、回到第二步，地址填好之后，找到Example-Configurations"><a href="#4、回到第二步，地址填好之后，找到Example-Configurations" class="headerlink" title="4、回到第二步，地址填好之后，找到Example Configurations"></a>4、回到第二步，地址填好之后，找到Example Configurations</h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/das.png" class="lazyload"></p><p>红线圈出来的就是你所得到的地址</p><h4 id="5、回到命令行-ping一下你得到的地址"><a href="#5、回到命令行-ping一下你得到的地址" class="headerlink" title="5、回到命令行,ping一下你得到的地址"></a>5、回到命令行,ping一下你得到的地址</h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/coauo.png" class="lazyload"></p><h4 id="6、查看一下IPv6模块开启状态"><a href="#6、查看一下IPv6模块开启状态" class="headerlink" title="6、查看一下IPv6模块开启状态"></a>6、查看一下IPv6模块开启状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img style="zoom:80%;" data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/heqwl.png" class="lazyload"></p><h4 id="7、添加域名解析AAAA，记录值就是之前的tunnel申请得到的ip"><a href="#7、添加域名解析AAAA，记录值就是之前的tunnel申请得到的ip" class="headerlink" title="7、添加域名解析AAAA，记录值就是之前的tunnel申请得到的ip"></a>7、添加域名解析AAAA，<code>记录值就是之前的tunnel申请得到的ip</code></h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/yuming.png" class="lazyload"></p><h4 id="8、测试域名，http-ipv6-test-com-validate-php"><a href="#8、测试域名，http-ipv6-test-com-validate-php" class="headerlink" title="8、测试域名，http://ipv6-test.com/validate.php"></a>8、测试域名，<a href="http://ipv6-test.com/validate.php" target="_blank" rel="noopener">http://ipv6-test.com/validate.php</a></h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/jiexi.png" class="lazyload"></p><p>到此解析完成，只是没有ipv6的服务，可以采用nginx部署服务</p><h3 id="Nginx安装与配置"><a href="#Nginx安装与配置" class="headerlink" title="Nginx安装与配置"></a>Nginx安装与配置</h3><h4 id="1、安装weget、vim和gcc"><a href="#1、安装weget、vim和gcc" class="headerlink" title="1、安装weget、vim和gcc"></a>1、安装weget、vim和gcc</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install wget</span><br><span class="line">yum install vim-enhanced</span><br><span class="line">yum install make cmake gcc gcc-c++</span><br></pre></td></tr></table></figure><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><ol><li><p><a href="http://nginx.org/download/nginx-1.9.9.tar.gz" target="_blank" rel="noopener">下载地址</a></p></li><li><p>将第一步下载的文件上传到服务器</p><p><img style="zoom:80%;" data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125143546.png" class="lazyload"></p></li></ol><h4 id="3、解压并执行文件"><a href="#3、解压并执行文件" class="headerlink" title="3、解压并执行文件"></a>3、解压并执行文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">tar xvzf nginx-1.4.4.tar.gz</span><br></pre></td></tr></table></figure><ol><li><p>跳转到解压过后的目录，执行命令配置新的参数，加入 ipv6模块。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.9.9</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/software/nginx/ --with-ipv6</span><br></pre></td></tr></table></figure></li><li><p>编译源码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>查看—with-ipv6是否已经存在</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/tmp/nginx-1.4.4/objs</span><br><span class="line">/usr/<span class="built_in">local</span>/software/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200124113242.png" class="lazyload">cd</p></li><li><p>启动nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software/nginx/sbin/</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>查看nginx是否运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep nginx</span><br></pre></td></tr></table></figure><p>   <img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125144158.png" class="lazyload"></p></li><li><p><code>此处我是修改了端口号的，如果你的80端口没有被占用就不用走这一步</code></p><ol><li><p>找到nginx.conf配置文件，在你的安装目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>修改默认端口，此处的ipv6地址，是你前面得到IPv6地址</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125150224.png" class="lazyload"></p></li><li><p>重启修改配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>查看Nginx配置文件是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125150431.png" class="lazyload"></p></li><li><font color="red">到此你需要注意一个问题，因为我前面是修改了端口号的，所以你需要在你的防火墙添加你修改的端口号，不然是无法访问的</font><ol><li><p>添加你修改的端口号，以我修改的1001为例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=1001/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>查看现在已有的端口号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125150946.png" class="lazyload"></p></li></ol></li><li><p>你可以用你的域名加端口号访问了，会出现下面界面</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125151042.png" class="lazyload"></p></li><li><p>可以登录<a href="http://ipv6-test.com/validate.php地址进行测试，但是可能会出现下面的情况" target="_blank" rel="noopener">http://ipv6-test.com/validate.php地址进行测试，但是可能会出现下面的情况</a></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125194630.png" class="lazyload"></p><font color="red">出现这个问题是He不够稳定，为了解决这个问题，我翻了很多帖子，下面给出解决办法，</font><ol><li><p>​    自己编写一个定时Ping的脚本，去ping一个IPv6地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software/nginx</span><br></pre></td></tr></table></figure><p>在s上面此路径中创建一个脚本文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch test.sh</span><br></pre></td></tr></table></figure><p>编写脚本文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim test.sh</span><br></pre></td></tr></table></figure><p>每隔5秒去ping一下这个地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> : ;<span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">ping6 ipv6.baidu.com -c1 &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"yes ping"</span></span><br><span class="line">sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test.sh</span><br></pre></td></tr></table></figure></li></ol></li><li><p>到此就大功告成了，</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/blog/20200125195717.png" class="lazyload"></p></li></ol><font color="red">制作不易，转载麻烦备注原创链接！！！</font></li></ol><p>参考链接：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMTI0NTE3NQ==&amp;mid=2649604103&amp;idx=1&amp;sn=1c66d301786923f6ffbd3f8f94a1fc87&amp;chksm=8f41211fb836a809e01d3d11e9cd8ab337f19a4ff5233c29cbc049c474342560ac29502216a2&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1579753062671&amp;sharer_shareid=e8ed6fd752ffeac4e2dc99939d3d2923#rd" target="_blank" rel="noopener">大佬链接1</a></p><p><a href="https://blog.csdn.net/yao_guai/article/details/90391113" target="_blank" rel="noopener">CSDN2</a></p><p><a href="https://blog.csdn.net/u014201191/article/details/85112590" target="_blank" rel="noopener">CSDN3</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> ipv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决服务器上传文件失败</title>
      <link href="/2019/12/23/%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5/"/>
      <url>/2019/12/23/%E8%A7%A3%E5%86%B3%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note primary">            <p>Hexo+GitHub Page+butterfly+jsdelivr+来比力+algolia+百度统计+leancloud+aplayer+PicGo </p>          </div><div class="note info">            <p>第二篇个人博客，关于讲解服务器运行出现问号+彻底解决mysql保存数据出现中文的情况</p>          </div><div class="note success">            <p>第三篇个人博客，关于讲解服务器上传文件失败的几种情况及解决方案</p>          </div><h1 id="服务器出现上传文件失败原因"><a href="#服务器出现上传文件失败原因" class="headerlink" title="服务器出现上传文件失败原因"></a>服务器出现上传文件失败原因</h1><p><code>move_upload０ed_file()函数返回参数较少，但是引起出错的原因却有很多，所以对于初学者难免会遇到问题。</code></p><div class="note success">            <h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3>          </div><p>通过<code>var_dump($_FILES[&#39;avatar&#39;]</code> 打印下面信息，<code>注意最后[&quot;size&quot;] =&gt;为0</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesfile-1.png" class="lazyload"></p><div class="note success">            <h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3>          </div><font color="#dd0000">**出现这个问题是由于你服务器的配置出现了问题**</font><div class="note success">            <h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>          </div><h4 id="连接到你的服务器，我用的是shell"><a href="#连接到你的服务器，我用的是shell" class="headerlink" title="连接到你的服务器，我用的是shell"></a>连接到你的服务器，我用的是shell</h4><p>输入下面命令，打开<code>php.ini</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/php.ini</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesQQ截图20191223163249.png" class="lazyload"></p><p></p><p>很多人到此觉得没有错了，本地上传也可以了，但是一上传到服务器结果还是失败了，一时间不知所措，但是我们一直忽略了一个问题，`文件的权限`，如果你的权限没有跟你的临时文件同步，你是拿不到临时文件里面的数据的，所以这也导致了在所有条件都满足的情况下，你还是会上传失败，下面我给出解决办法。</p><br>经比较发现／tmp的权限是　drwxrwxrwx　，而我的 <code>网站文件存放位置</code> 的权限为　drwxr-xr-x　，问题一目了然。<p></p><p>下面修改<code>网站存放位置</code>的权限　chmod -R 777 <code>/网站存放位置</code> (对整个目录以及子目录所有文件更改了权限)。</p><font color="#dd0000">到此，问题得以解决</font><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191223164934.png" class="lazyload"></p><font color="#dd0000">以上就是我总结的有关问题解决方案，转载的麻烦备注原文链接哦！！！</font>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于服务器显示中文乱码+mysql保存数据乱码</title>
      <link href="/2019/12/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E5%87%BA%E7%8E%B0%E9%97%AE%E5%8F%B7-mysql%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5/"/>
      <url>/2019/12/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E8%A1%8C%E5%87%BA%E7%8E%B0%E9%97%AE%E5%8F%B7-mysql%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E7%9A%84%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note primary">            <p>Hexo+GitHub Page+butterfly+jsdelivr+来比力+algolia+百度统计+leancloud+aplayer+PicGo </p>          </div><div class="note info">            <p>第二篇个人博客，关于讲解服务器运行出现问号+彻底解决mysql保存数据出现中文的情况</p>          </div><h1 id="服务器运行出现问号的情况"><a href="#服务器运行出现问号的情况" class="headerlink" title="服务器运行出现问号的情况"></a>服务器运行出现问号的情况</h1><div class="note success">            <h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3>          </div><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images问号.png" class="lazyload"></p><div class="note success">            <h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3>          </div><font color="#dd0000">**出现这个问题是由于你服务器的配置出现了问题**</font><div class="note success">            <h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>          </div><h4 id="连接到你的服务器，我用的是shell"><a href="#连接到你的服务器，我用的是shell" class="headerlink" title="连接到你的服务器，我用的是shell"></a>连接到你的服务器，我用的是shell</h4><p><code>输入下面命令，进行配置</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagessolove.png" class="lazyload"></p><p><code>红色箭头输入：</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">character-set-server=utf8</span><br></pre></td></tr></table></figure><p><code>红色框除处输入：</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>输入完成之后，按下<code>esc</code>，输入<code>:wq</code>，保存退出</p><p>到此，重启一下，<font color="#dd000">服务器，数据库，php，刷新一下数据库，</font>可以看到问号已经变成你原有显示的数据。</p><h1 id="mysql保存数据出现乱码情况"><a href="#mysql保存数据出现乱码情况" class="headerlink" title="mysql保存数据出现乱码情况"></a>mysql保存数据出现乱码情况</h1><div class="note success">            <h3 id="问题详情"><a href="#问题详情" class="headerlink" title="问题详情"></a>问题详情</h3>          </div><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesproblem.jpg" class="lazyload"></p><font color="#dd000">nickename本来存入的是我从服务器传入的中文数据，到此出现了乱码的情况</font><div class="note success">            <h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3>          </div><font color="#dd000">此处是编码没有统一，可能存在多种情况，按照我的问题解决方案即可完成解决。</font><div class="note success">            <h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>          </div><div class="note danger">            <p>我用的是Navicat，以下解决方案只适用我这款软件，但是其他也都大同小异</p>          </div><h4 id="新建数据库时要统一编码"><a href="#新建数据库时要统一编码" class="headerlink" title="新建数据库时要统一编码"></a>新建数据库时要统一编码</h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesbianma.png" class="lazyload"></p><h4 id="编写表的时候，每个栏位字符集要统一"><a href="#编写表的时候，每个栏位字符集要统一" class="headerlink" title="编写表的时候，每个栏位字符集要统一"></a>编写表的时候，每个栏位字符集要统一</h4><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imageszifuji.png" class="lazyload"></p><div class="note danger">            <p>到此，网上很多教程都讲完了，但是当你打开数据库，再次进行数据保存的时候依然是乱码情况。这个最后的问题纠结了我一晚上加一早上。以下，我给出终极解决办法，</p>          </div><h4 id="代码字符集统一"><a href="#代码字符集统一" class="headerlink" title="代码字符集统一"></a>代码字符集统一</h4><p><code>在你每次连接数据库之后，一定要设定当前连接的数据库的字符集，不要问我为什么，服务器的牛逼我也答不上来。</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagescodetongyi.png" class="lazyload"></p><font color="#dd0000">其实我本地连接到我的远程数据是可以正常保存的，但是从服务器保存就要出错，最终解决办法就如上所示了，但是其他的步骤还是要按照我的来。</font><font color="#dd0000">以上就是我总结的有关问题解决方案，转载的麻烦备注原文链接哦！！！</font>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> php </tag>
            
            <tag> 中文乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo+GitHub Page搭建个人博客(一)</title>
      <link href="/2019/11/25/hexo-GitHub-Page%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/25/hexo-GitHub-Page%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note primary">            <p>Hexo+GitHub Page+butterfly+jsdelivr+来比力+algolia+百度统计+leancloud+aplayer+PicGo </p>          </div><div class="note info">            <p>第一篇个人博客，关于讲解基本的Hexo+GitHub Page技术搭建。后续会陆续的更新Hexo博客的搭建，用到了哪些技术和实现具体的功能。</p>          </div><h1 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h1><div class="note success">            <h3 id="下载node-js"><a href="#下载node-js" class="headerlink" title="下载node.js"></a>下载node.js</h3>          </div><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js下载地址</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">node.js下载安装教程</a></p><p>注意：下载速度较慢，下载成功之后，直接安装就好了，测试是否安装成功可以用下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>成功如下图所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesnpm test.png" class="lazyload"></p><div class="note success">            <h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3>          </div><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git下载地址</a></p><p><a href="https://blog.csdn.net/qq_39387475/article/details/84996173" target="_blank" rel="noopener">Git下载安装教程</a></p><p>附：配置Git（第一次登陆需要配置）</p><p>​    设置Git的 user name和 email:</p><p>​    </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"你注册的用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"你注册的邮箱"</span></span><br></pre></td></tr></table></figure><p>检查是否配置成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.emai</span><br></pre></td></tr></table></figure><p>成功如下图所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesgit-check.png" class="lazyload"></p><div class="note success">            <h3 id="GitHub账号注册"><a href="#GitHub账号注册" class="headerlink" title="GitHub账号注册"></a>GitHub账号注册</h3>          </div><ol><li><p>进入GitHub官网 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p></li><li><p>注册GitHub账号</p><p><img alt="GitHub注册" data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesGithub-sign-up.png" class="lazyload"></p><p>注意： <font color="#dd0000">注册之后会跳转到一个邮箱验证界面，输入正确的验证码，验证成功之后即可登录</font> </p></li><li><p>在github上新建一个项目，项目的名称必须是（<font color="#dd0000">你的用户名.github.io</font>)才行 </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesbuild-github.png" class="lazyload"></p><font color="#dd0000">因为我已经配置过了，所以会显示Already exists</font><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesgithub-io.png" class="lazyload"></p></li></ol><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><div class="note success">            <h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3>          </div><p> 首先在本地磁盘中建立一个Hexo文件夹用于存储本地文件(做本地文件保存以及测试使用) </p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesbuild-hexo .png" class="lazyload"></p><div class="note danger">            <h3 id="因为我已经配置好了Hexo，所以直接按照我以下步骤操作即可，"><a href="#因为我已经配置好了Hexo，所以直接按照我以下步骤操作即可，" class="headerlink" title="因为我已经配置好了Hexo，所以直接按照我以下步骤操作即可，"></a>因为我已经配置好了Hexo，所以直接按照我以下步骤操作即可，</h3>          </div><p>进入你刚才的博客创建目录</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesgit-bash.png" class="lazyload"></p><div class="note success">            <h3 id="下载cnpm"><a href="#下载cnpm" class="headerlink" title="下载cnpm"></a>下载cnpm</h3>          </div><p>由于npm下载较慢，所以我们可以先利用<code>npm</code>下载一个<code>cnpm</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>成功如下图所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201135113.png" class="lazyload"></p><h3 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201133247.png" class="lazyload"></p><p>测试是否安装成功:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>成功如下图所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201133407.png" class="lazyload"></p><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hexo init</span><br></pre></td></tr></table></figure><font color="#dd0000">此过程需要一点时间，耐心等待即可</font><p>安装成功提示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201133811.png" class="lazyload"></p><p>安装成功之后可以用下面命令查看已安装的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201134040.png" class="lazyload"></p><h3 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h3><p>到了这里hexo已经安装完成了，可以用下面命令进行启动：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201134232.png" class="lazyload"></p><p>现在可以看到博客已经启动成功了，在你的浏览器里面输入<font color="#dd0000">localhost:4000</font>即可看到如下图所示内容：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201134511.png" class="lazyload"></p><font color="#dd0000">到此你的Hexo博客就安装成功了</font><h1 id="将项目部署到GitHub"><a href="#将项目部署到GitHub" class="headerlink" title="将项目部署到GitHub"></a>将项目部署到GitHub</h1><h3 id="装Git插件"><a href="#装Git插件" class="headerlink" title="装Git插件"></a>装Git插件</h3><p><code>在你的博客目录下操作</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201135801.png" class="lazyload"></p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>配置你的<code>_config.yml</code>文件。可以用下面命令打开</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>打开之后，在最下面找到<code>type</code>，<code>repo</code>和<code>branch</code>。<code>type</code>后面写<code>git</code>，<code>repo</code>后面加你的Github新建的<code>仓库地址</code>，<code>branch</code>后面跟<code>master</code></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201140851.png" class="lazyload"></p><ul><li>地址查看如P1.2和1.2所示<img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201140427.png" class="lazyload"></li></ul><p><div align="center">P1.1</div><br><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201140627.png" class="lazyload"></p><p><div align="center">P1.2</div></p><font color="#dd0000">写好之后，按下esc，输入:wq，回车。即保存已更改的文件并退出</font><h3 id="布置到远端"><a href="#布置到远端" class="headerlink" title="布置到远端"></a>布置到远端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署成功时候，点开你的Github博客仓库，即可看到你的Hexo博客文件</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201142742.png" class="lazyload"></p><font color="#dd0000">可能你的文件不是我这样的，因为我是已经配置好了的，但是会出现一些文件夹，就是你的Hexo博客内容</font><p>首次安装，大致内容如下所示：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201142941.png" class="lazyload"></p><div class="note danger">            <p>如果之前的Git你没有配置你的用户名信息等，你可能在此处会输入你的邮箱和密码</p>          </div><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201143201.png" class="lazyload"></p><p>输入提交之后即可上传至你的GitHub仓库。</p><p>在浏览器输入<code>https://你的GitHub用户名.github.io</code>即可看到</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images20191201134511.png" class="lazyload"></p><p><div align="center"><font color="#dd0000">安装成功</font></div></p><h1 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h1><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><code>初始化Hexo</code></p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"我的第一篇博客"</span></span><br></pre></td></tr></table></figure><p>新建一篇文章,简写<code>hexo n</code></p><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生产静态文件,可简写<code>hexo g</code>。每次更改文件后，可以重新生成一下。</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站，部署到远端需要用到这个命令。</p><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">更多命令点此查看</a></p><h3 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h3><p>有什么问题可以采用以下几种方式：</p><ol><li>文章下面评论</li><li>博客留言板留言</li><li>邮件：ydkd0606@163.com</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Page </tag>
            
            <tag> 教程 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>photos</title>
      <link href="/2019/11/20/photos/"/>
      <url>/2019/11/20/photos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="justified-gallery"><p><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/images头像.jpg" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesbanner.jpg" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagesmessageboard.jpg" class="lazyload"><br><img alt data-src="https://cdn.jsdelivr.net/gh/YDKD/Blogger/imagespicture.jpg" class="lazyload"></p>          </div>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
